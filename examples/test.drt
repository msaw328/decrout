# This is a comment, this part should be ignored

# entities and scopes:
# Entity is some kind of a thing that one can access, it may be a variable a function a more complex object
# but its always stored at some address of memory and can be accessed through a symbol associated with it
# A declaration of any sort of entity always defines a symbol in a given scope to refer to said entity with

# For instance, routines are entities that consist of CPU instructions and may be called,
# they are defined using 'rt <routine name> [arg list]: <return type> { <routine body> }' syntax
# this syntax automatically declares a symbol in current scope of type '(rt[<arg types>]:<return type>)>' which is a pointer to a routine

# Alternatively, a variable is an entity that stores a value such as a 32 bit signed integer, or a character
# or a pointer to an unsigned 64 bit int. the primitive types supported are:
# u8, u16, u32, u64, i8, i16, i32, i64, char
# A pointer is denoted by '>' at the end of a type that is being pointed to, so 'char>>' is a pointer to a pointer to a char
# Variables as entities may be declared using the 'decl' keyword with this syntax: 'decl <variable name>: <type> (= optional value expression)'

# Each declaration of an entity automatically also declares a symbol which can be used to refer to that entity.
# The symbol is usuable until the most innermost scope within which it was declared ends. It is guaranteed that the entity associated with
# This symbol will live for at least as long as said scope, it may live longer but there are no guarantees about it.

# The default, outermost scope is the global scope. It only allows for declaration of variables and routines, with no support for standalone expressions
# and unnamed scopes

# Below code defines a variable in the outermost global scope called "global_var".
# Afterwards it declates a routine called "main" with two arguments,
# first is a signed int of 32 bits called argc and the second is a pointer to a pointer to a char
# In the routine it declares a variable called "result" whose value is equal to 4 plus the value of global_var
# Afterwards 3 things are printed using the builtin keyword "native_out":
# The value of result, variables of type u32 are printed as numeric decimal strings
# The value at argv offset by 0 times the size of the element. Since argv is a pointer to a pointer to a char, value at argv is a pointer to a char
# While by default most pointers are printed as hexadecimal values, char> is printed by assuming its a NULL terminated string, so this prints a sequence of chars
# Lastly, main is printed. Since main is of type (rt[i32, char>>]:i32)>, again a hexadecimal value will be printed

decl global_var: u32 = 8;
decl global_str: char> = "Hello world!";

# Below line could be syntactic sugar for decl main: (rt [ i32, char>> ]: i32)> = rt [ argc: i32, argv: char>> ]: i32 {}
# To keep it consistent with variable declarations
rt main [ argc: i32, argv: char>> ]: i32 {
    decl result: u32 = 4 + global_var;
    decl result_addr: u32> = result$;

    result_addr@ = 0x789 + 0123124 + 0b1111;

    decl char_var: char = '\x20';

    decl complicated: bool = char_var$@$@$@$@$@$@$@<>char_var;

    var_dump(result);
    var_dump(argv@1);
    var_dump(global_str);
    var_dump(main);
}
